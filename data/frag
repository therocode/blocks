//#version 330
#version 120

uniform sampler2D tex0;
uniform vec2 screenSize;
//out vec4 fragColor;


varying vec3 vColor;
varying vec3 vNorm;
varying vec3 vLight;
varying vec3 eyeDir;

varying vec3 modelSpace;

varying vec2 texCoord;
varying vec3 posCamSpace;
varying vec3 normalWorldSpace;


float random2f(vec2 co){
	return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

vec2 voronoi( in vec2 x )
{
	vec2 p = floor( x );
	vec2  f = vec2(fract( x ));

	vec2 res = vec2( 8.0 );
	vec2 res2 = vec2( 8.0 );
	for( int j=-1; j<=1; j++ )
		for( int i=-1; i<=1; i++ )
		{
			ivec2 b = ivec2( i, j );
			vec2  r = vec2( b ) - f + random2f( p + b );
			float d = dot( r, r );


			if( d < res2.x){
				if( d < res.x ){
					res.y = res.x;
					res.x = d;
				}else{
					res2.y = res2.x;
					res2.x = d;	
				}
			}
			else if( d < res2.y )
			{
				if(d < res.y){
					res.y = d;
				}else{
					res2.y = d;
				}		
			}
		}

	return sqrt( res2) - sqrt( res );
}
void main(){
vec4 fragColor;
	vec3 spec = vec3(1.0, 1.0, 1.0);
	vec3 R = reflect(-vLight, -vNorm);
	vec3 E = normalize(eyeDir);
	float f = pow(max(dot(R, E), 0.0),2.f);// 0.0, 1.0);
	//fragColor = vec4((vColor + spec *  f), 0.5) ;
	fragColor = vec4(vColor, 1.0);
	fragColor -= 0.1*pow(length(vec2(0.5)-texCoord), 1.8);// + 0.03 * length(voronoi(texCoord.xy * 10.0));

	vec4 texColor = texture2D(tex0, texCoord);
	fragColor *= texColor;
	//Crosshair
		vec2 d = vec2(gl_FragCoord.xy);

	d -= screenSize * 0.5;
	d = floor(d);

	float chW = 1;
	float chS = 6.0;


	
	vec4 ff = vec4(1.0, 1.0, 1.0, 1.0);
	ff.w = 1.0;
	fragColor += texColor * ff * max( 1.0 - length(posCamSpace) * 0.05, 0.0);
	//gamme correction kinda 
	if (fragColor.x<0.50)
		fragColor.rgb = pow(fragColor.rgb, vec3(1.0 / 0.8));

	if(abs(d.x)  < chW || abs(d.y) < chW  ){
		if(abs(d.x) < chS && abs(d.y) < chS)
			fragColor = vec4(1.0) - fragColor;	
	}
	fragColor.a = 1.0;
	gl_FragColor = fragColor;
//	gl_FragColor = vec4(normalWorldSpace, 1.0);
}
