//#version 330
#version 120


uniform sampler2D tex0;
uniform vec2 screenSize;
uniform int  enableBoundsTexture;

//out vec4 fragColor;


varying vec3 vColor;
varying vec3 vNorm;
varying vec3 vLight;
varying vec3 eyeDir;

varying vec3 modelSpace;

varying vec2 texCoord;
varying vec3 posCamSpace;
varying vec3 normalWorldSpace;

varying vec4 textureBounds;
#define epsilon 0.0001

float random2f(vec2 co){
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}
void main(){
    vec4 fragColor;
    vec3 spec = vec3(1.0, 1.0, 1.0);
    vec3 R = reflect(-vLight, -vNorm);
    vec3 E = normalize(eyeDir);
    float f = pow(max(dot(R, E), 0.0),2.f);// 0.0, 1.0);
    //fragColor = vec4((vColor + spec *  f), 0.5) ;
    fragColor = vec4(vColor, 1.0);

    vec2 texD = vec2(textureBounds.zw) - vec2(textureBounds.xy);
    vec2 mTexCoord; 
    vec4 texColor = vec4(0, 0, 0, 0); 
    int samples = 8;
    if(enableBoundsTexture == 1){
        mTexCoord = textureBounds.xy + fract(vec2(texCoord)) * texD;
        texColor = texture2D(tex0, mTexCoord);
    }else{
        mTexCoord = texCoord;
        texColor = texture2D(tex0, mTexCoord);
    }
    //fragColor -= 0.5*pow(length(vec2(0.5)- fract(texCoord)), 1.8);// + 0.03 * length(voronoi(texCoord.xy * 10.0));

    fragColor *= texColor;
    //Crosshair
    vec2 d = vec2(gl_FragCoord.xy);

    d -= screenSize * 0.5;
    d = floor(d);

    float chW = 1;
    float chS = 12.0;

    vec4 ff = vec4(1.0, 1.0, 1.0, 1.0);
    ff.w = 1.0;
    fragColor += texColor;// * ff * max( 1.0 - length(posCamSpace) * 0.05, 0.0);
    //gamme correction kinda 
    if (fragColor.x<0.50)
        fragColor.rgb = pow(fragColor.rgb, vec3(1.0 / 0.8));

    fragColor.a = 1.0;
    fragColor =(texColor+ fragColor) * 0.5;
    if(abs(d.x)  < chW || abs(d.y) < chW  ){
        if(abs(d.x) < chS && abs(d.y) < chS)
            fragColor = vec4(1.0) - fragColor;	
    }
    gl_FragColor = fragColor;
}
