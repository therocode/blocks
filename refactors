in src/application/

client.cpp
-Client Should not take care of keeping local chunks and updating them. there should be some form of LocalChunkHolder which holds local copies of chunks and takes care of updating and such instead.
-Client Should not be responsible of packing and unpacking network packages. a class which the packages are relayed to should be created
-Client should not calculate the FPS. There could be a separate class with that responsibility
-Client should not be responsible for loading the icon texture. Maybe wrap the fea::window and the icon functionality in a blocks window class?
-Maybe move the server handling into a Network class

server.cpp
-Server should not be responsible of sending FrameMessages. Maybe create a general GameController which does this and other general things.
-Maybe move the client handling into a Network class.
-Server should not be responsible of packing and unpacking network packages. a class which the packages are relayed to should be created.
--------------------------------------------------------------

in src/input/

inputadaptor.cpp
-take out player ID.
--------------------------------------------------------------

in src/networking

remoteclientconnectionlistener.cpp
-RemoteClientConnectionListener should not be responsible for converting host bytes to an IP string. Create utility class for this

packages.h
-Move channel enum and channel count into separate h file and use that in places like "mChannelCount = 3" in remoteserverbridge.cpp
--------------------------------------------------------------

in src/utilities

timer.cpp
-this class should probably not do fps related stuff. maybe make a separate class that uses a timer& to do fps stuff.
--------------------------------------------------------------

in src/world

chunkprovider.h
-no need for a base class for chunk provider. shoudl be changed into some framework for generating the world. This can be done during landscape generation write phase

dimension.h
-the whole deal with highlight chunk is bad. should implement a system which allows players to have overlapping chunk surroundings with ref counting

world.cpp
-make the world support more than one dimension
-maybe have controllers specific to dimensions
-nicer structure. rgiht now, setvoxel is just handled in the world. maybe it could be handled in dimension.cpp
--------------------------------------------------------------

regarding entity/script
-figure out how the script system should be tied to an entity in a neat way that allows for mutual creations and removals.
--------------------------------------------------------------

in src/script
-redesign the whole script system with the new gained knowledge
--------------------------------------------------------------

in entity

entitysystem.cpp
-related to script stuff, remake entity spawning and removal
--------------------------------------------------------------

in rendering

pretty muhc everything needs an overhaul. this should be thought through and done when the models and animations are implemented
